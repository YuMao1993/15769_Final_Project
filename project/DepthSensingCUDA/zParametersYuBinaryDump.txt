// 0=Kinect; 1=PrimeSense; 2=KinectOne; 3=BinaryDumpReader; 4=NetworkSensor; 5=IntelSensor; 6=RealSense; 7=StructureSensor; 8=SensorDataReader; 9 = MultiSensor
s_sensorIdx = 9;

//s_windowWidth = 1280;		//render window width
//s_windowHeight = 960;		//render window height
s_windowWidth = 640;		//render window width
s_windowHeight = 480;		//render window height

//s_adapterWidth = 640;		//input depth gets re-sampled to this width (decrease to improve perf.)
//s_adapterHeight = 480;		//input depth gets re-sampled //to this height (decrease to improve perf.)
s_adapterWidth = 320;		//input depth gets re-sampled to this width (decrease to improve perf.)
s_adapterHeight = 240;		//input depth gets re-sampled to this height (decrease to improve perf.)
//s_adapterWidth = 1296;		//this really hits perf (ray cast)
//s_adapterHeight = 968;		//this really hits perf (ray cast)

s_sensorDepthMax = 3.5f;	//maximum sensor depth in meter
s_sensorDepthMin = 0.5f;	//minimum sensor depth in meter

// cropping options for PrimeSense & Asus Xtion Pro
s_enableColorCropping = false;
s_colorCropX = 320;
s_colorCropY = 272;
s_colorCropWidth = 640;
s_colorCropHeight = 480;

// sdf and hash settings
s_SDFVoxelSize = 0.008f;				//voxel size in meter (IMPORTANT: reduces to improve perf.)
s_SDFMarchingCubeThreshFactor = 10.0f;	//marching cube thresh: s_SDFMarchingCubeThresh = s_SDFMarchingCubeThreshFactor*s_SDFVoxelSize
s_SDFTruncation = 0.02f;				//truncation in meter
s_SDFTruncationScale = 0.01f;			//truncation scale in meter per meter
s_SDFMaxIntegrationDistance = 3.0f;		//maximum integration in meter
s_SDFIntegrationWeightSample = 10;		//weight for an integrated depth value
s_SDFIntegrationWeightMax = 255;		//maximum integration weight for a voxel
// s_SDFBlockSize is pound defined (SDF_BLOCK_SIZE)
// s_hashBucketSize is pound defined (HASH_BUCKET_SIZE)
s_hashNumBuckets = 50000;				//smaller voxels require more space
s_hashNumSDFBlocks = 262144;  //100000	//smaller voxels require more space
s_hashMaxCollisionLinkedListSize = 1000000;

// raycast
s_SDFRayIncrementFactor = 0.8f;			//(don't touch) s_SDFRayIncrement = s_SDFRayIncrementFactor*s_SDFTrunaction;
s_SDFRayThresSampleDistFactor = 50.5f;	//(don't touch) s_SDFRayThresSampleDist = s_SDFRayThresSampleDistFactor*s_rayIncrement;
s_SDFRayThresDistFactor = 50.0f;		//(don't touch) s_SDFRayThresDist = s_SDFRayThresSampleDistFactor*s_rayIncrement;
s_SDFUseGradients 		= false;		//analytic gradients for rendering

// s_binaryDumpSensorFile = "Dump/simple.sensor";
// s_binaryDumpSensorFile = "Dump/simple_new.sensor";
// s_binaryDumpSensorFile = "Dump/nsh4224_dynamic.sensor";
// s_binaryDumpSensorFile = "Dump/nsh4224_static.sensor";
// s_binaryDumpSensorFile = "Dump/nsh4224_dynamic_quick.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_1.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_2.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_3.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_4.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_5.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_6.sensor"
// s_binaryDumpSensorFile = "Dump/nshcommon_7.sensor"
// s_binaryDumpSensorFile = "Dump/nsh_long_1.sensor"
// s_binaryDumpSensorFile = "Dump/nsh_long_2.sensor"
// s_binaryDumpSensorFile = "Dump/nsh_long_3.sensor"
// s_binaryDumpSensorFile = "Dump/nsh_long_4.sensor"
// s_binaryDumpSensorFile = "Dump/nsh_long_5.sensor"

s_binaryDumpSensorFileList = "Dump/nsh_long_1.sensor,Dump/nsh_long_2.sensor"

s_binaryDumpSensorUseTrajectory = true;				    // use the recorded trajectory form the binary dump as the our rigid transformation estimation.
s_binaryDumpSensorUseTrajectoryOnlyInit = false;	    // This option is valid only if the previous one is set true. If it is false, then for every frame we will be using the precomputed traj instead of performing ICP. Otherwise we will only be using the precomputed traj for the first frame.

// filtering
s_depthSigmaD = 2.0f;	//bilateral filter sigma domain
s_depthSigmaR = 0.1f;	//bilateral filter sigma range
s_depthFilter = true;	//bilateral filter enabled depth

s_colorSigmaD = 2.0f;	//bilateral filter sigma domain
s_colorSigmaR = 0.1f;	//bilateral filter sigma range
s_colorFilter = false;	//bilateral filter enabled depth

s_integrationEnabled		= true;
s_trackingEnabled			= true;		// enable ICP for pose estimation. If disabled, the rigid transformaion would be the identity.
s_timingsDetailledEnabled   = false;	    //enable timing output
s_timingsTotalEnabled		= false;	//enable timing output
s_garbageCollectionEnabled	= false;
s_garbageCollectionStarve	= 15;		//decrement the voxel weight every n'th frame

// rendering
s_materialShininess 	= 16.0f;
s_materialAmbient   	= 0.75f 0.65f 0.5f 1.0f;
s_materialDiffuse 		= 1.0f 0.9f 0.7f 1.0f;
s_materialSpecular 		= 1.0f 1.0f 1.0f 1.0f;
s_lightAmbient 			= 0.4f 0.4f 0.4f 1.0f;
s_lightDiffuse 			= 0.6f 0.52944f 0.4566f 0.6f;
s_lightSpecular 		= 0.3f 0.3f 0.3f 1.0f;
s_lightDirection 		= 0.0f -1.0f 2.0f;

s_RenderMode = 1;

s_useColorForRendering = false;
s_playData = true;

s_renderingDepthDiscontinuityThresOffset = 0.012f;  // discontinuity offset in meter
s_renderingDepthDiscontinuityThresLin	 = 0.001f; // additional discontinuity threshold per meter
s_remappingDepthDiscontinuityThresOffset = 0.012f; // discontinuity offset in meter
s_remappingDepthDiscontinuityThresLin	 = 0.01f; // additional discontinuity threshold per meter

s_bUseCameraCalibration = true;

s_marchingCubesMaxNumTriangles = 2500000; // max buffer size for marching cube

//streaming parameters
s_streamingEnabled = true;
s_streamingChunkExtents = 1.0f 1.0f 1.0f;
s_streamingGridDimensions = 257 257 257;		// dimensions have to be odd (number of samples)
s_streamingMinGridPos = -128 -128 -128;
s_streamingInitialChunkListSize = 2000;
s_streamingRadius = 4.0f;						// Radius of the active region, depending on DepthMin and DepthMax 
s_streamingPos = 0.0f 0.0f 3.0f 1.0f;			// Center of the active region in camera space, depending on DepthMin and DepthMax
s_streamingOutParts = 10;						// number of frames required to sweep through the entire hash

//recording of the input data
s_recordData = true;				// master flag for data recording: enables or disables data recording
s_recordCompression = false;		//if recoding is enabled; then compression is used (.sens instead of .sensor)
	s_recordDataFile = "./Dump/test.sensor";
s_reconstructionEnabled = true;		//if recording is enabled; then the rigid transformation of the camera in each frame is also recorded.

// optimization
s_enableBatchBuffering = true;
s_batchBufferingSize = 10;

// profiler
s_profilerDumpFolder = "./profiling_dump";   //dump folder output
